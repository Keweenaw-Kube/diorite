plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.palantir.git-version' version '0.12.3'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = gitVersion()
group = project.maven_group

//configurations {
//	provided
//	compile.extendsFrom(provided)
//}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
	modImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'

	include 'com.fasterxml.jackson.core:jackson-annotations:2.11.1'
	include 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
	include 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
	include 'com.fasterxml.jackson.core:jackson-core:2.11.1'
	include 'org.yaml:snakeyaml:1.29'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

//jar {
//	from("LICENSE") {
//		rename { "${it}_${project.archivesBaseName}"}
//	}
//
//	from {
//		configurations.provided.collect { it.isDirectory() ? it : zipTree(it) }
//	}
//}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
